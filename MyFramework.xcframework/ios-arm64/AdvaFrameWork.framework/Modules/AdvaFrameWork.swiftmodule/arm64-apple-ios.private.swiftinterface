// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AdvaFrameWork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AMShimmer
@_exported import AdvaFrameWork
import Alamofire
import Cosmos
import DLRadioButton
import DropDown
import FittedSheets
import FormTextField
import Foundation
import ImageSlideshow
import Loaf
import ReadMoreTextView
import SDWebImage
import SVProgressHUD
import SearchTextField
import SkeletonView
import Swift
import SwiftyJSON
import UIKit
import VKPinCodeView
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HomeVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
extension AdvaFrameWork.HomeVC : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: AdvaFrameWork.HorizontalAlignment, b: AdvaFrameWork.HorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: AdvaFrameWork.VerticalAlignment, b: AdvaFrameWork.VerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) public var horizontalAlignment: AdvaFrameWork.HorizontalAlignment
  @_Concurrency.MainActor(unsafe) public var verticalAlignment: AdvaFrameWork.VerticalAlignment
  @_Concurrency.MainActor(unsafe) public init(horizontalAlignment: AdvaFrameWork.HorizontalAlignment = .justified, verticalAlignment: AdvaFrameWork.VerticalAlignment = .center)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ServicesVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func pullToRefresh()
  @objc deinit
}
extension AdvaFrameWork.ServicesVC : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
public protocol Localizable {
  var localized: Swift.String { get }
}
extension Swift.String : AdvaFrameWork.Localizable {
  public var localized: Swift.String {
    get
  }
}
public protocol XIBLocalizable {
  var xibLocKey: Swift.String? { get set }
}
extension UIKit.UILabel : AdvaFrameWork.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UIButton : AdvaFrameWork.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UIImageView : AdvaFrameWork.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UINavigationItem : AdvaFrameWork.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
extension UIKit.UIBarItem : AdvaFrameWork.XIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
public protocol XIBMultiLocalizable {
  var xibLocKeys: Swift.String? { get set }
}
extension UIKit.UISegmentedControl : AdvaFrameWork.XIBMultiLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibLocKeys: Swift.String? {
    @objc get
    @objc set(keys)
  }
}
public protocol UITextFieldXIBLocalizable {
  var xibPlaceholderLocKey: Swift.String? { get set }
}
extension UIKit.UITextField : AdvaFrameWork.UITextFieldXIBLocalizable {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var xibPlaceholderLocKey: Swift.String? {
    @objc get
    @objc set(key)
  }
}
public enum APIErrorCases : Swift.Error {
  case custom
  case customWith(statusCode: Swift.Int)
}
extension AdvaFrameWork.APIErrorCases : Foundation.LocalizedError {
}
extension UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cstmlayoutSubviews()
}
extension UIKit.UITextField {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cstmlayoutSubviews()
}
extension UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cstmlayoutSubviews()
}
extension AdvaFrameWork.HorizontalAlignment : Swift.Equatable {}
extension AdvaFrameWork.HorizontalAlignment : Swift.Hashable {}
extension AdvaFrameWork.VerticalAlignment : Swift.Equatable {}
extension AdvaFrameWork.VerticalAlignment : Swift.Hashable {}
